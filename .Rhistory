install.packages("locfdr")
rm(list = ls())
library(latex2exp)
library(tidyverse)
library(boot)
library(PMA)
library(pls)
library(MASS)
library(glmnet)
library(ROCR)
library(RDRToolbox)
library(diffusionMap)
library(car)
library(tsne)
library(locfdr)
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE,
fig.width=6, fig.height=4)
options(scipen = 99)
set.seed(321)
load('RejectionStatus.rda')
load('X_GSE21374.rda')
dim(RejectionStatus)
dim(X_GSE21374)
GeneExpression <- t(X_GSE21374)
GeneExpression_C <- scale(t(X_GSE21374),scale = F) # centered
GeneExpression_S <- scale(t(X_GSE21374),scale = T) # scaled
GeneExpression <-
GeneExpression[order(as.numeric(row.names(GeneExpression))), ]
RejectionStatus <-
RejectionStatus[order(as.numeric(RejectionStatus$Patient_ID)), ]
all.equal(row.names(GeneExpression), as.character(RejectionStatus$Patient_ID))
df <- tibble(patient = RejectionStatus$Patient_ID,
reject = ifelse(RejectionStatus$Reject_Status == 1, "Rejected", "Accepted"),
as.data.frame(GeneExpression_C)) %>%
pivot_longer(cols = c(-reject,-patient) , names_to = "gene", values_to = "expression")
# calculate summaries
df %>%
group_by(reject, gene) %>%
summarise(mean = mean(expression),
sd = sd(expression),
min = min(expression),
max = max(expression),
median = median(expression),
iqr = IQR(expression)) -> basics
# long format
basics %>%
pivot_longer(-c(reject, gene),
names_to = "statistic",
values_to = "value") -> basics_long
# fix order of statistics for plot facet
basics_long %>%
mutate(statistic = factor(statistic,
levels = c("mean", "sd", "min",
"median", "iqr", "max"))) -> basics_long
# plot
ggplot(basics_long, aes(value, fill = reject)) +
geom_density(alpha = 0.5) +
theme_classic() +
labs(fill = "Status") +
facet_wrap("statistic", scales = "free" ) +
scale_fill_manual(values = c("#4DBBD5", "#E64B35")) +
labs(x="")
id.all <- numeric()
loadings <- numeric()
variables_per_part <- dim(GeneExpression)[2]/3
for(i in 1:3){
start <- 1 + (i-1)*variables_per_part
stop <- start + variables_per_part-1
gene_lda <- lda(GeneExpression_S[,start:stop], grouping = RejectionStatus$Reject_Status)
V <- gene_lda$scaling
Z <- GeneExpression_S[,start:stop] %*% V
lda_loadings <- cv.glmnet(GeneExpression_S[,start:stop], Z, alpha = 0.5, nfolds = 5)
sparse_lda_loadings <- as.vector(coef(lda_loadings))
id.all <- append(id.all, which(sparse_lda_loadings[-1]!=0) + (i-1)*18225)
loadings <- append(loadings, sparse_lda_loadings[-1][sparse_lda_loadings[-1]!=0])
}
